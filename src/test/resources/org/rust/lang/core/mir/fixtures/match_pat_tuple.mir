fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at src/main.rs:1:11: 1:11
    let mut _1: (i32, i32);              // in scope 0 at src/main.rs:2:11: 2:17
    let _2: i32;                         // in scope 0 at src/main.rs:3:10: 3:11
    let _3: i32;                         // in scope 0 at src/main.rs:3:13: 3:14
    scope 1 {
        debug a => _2;                   // in scope 1 at src/main.rs:3:10: 3:11
        debug b => _3;                   // in scope 1 at src/main.rs:3:13: 3:14
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at src/main.rs:2:11: 2:17
        _1 = (const 1_i32, const 2_i32); // scope 0 at src/main.rs:2:11: 2:17
        FakeRead(ForMatchedPlace(None), _1); // scope 0 at src/main.rs:2:11: 2:17
        StorageLive(_2);                 // scope 0 at src/main.rs:3:10: 3:11
        _2 = (_1.0: i32);                // scope 0 at src/main.rs:3:10: 3:11
        StorageLive(_3);                 // scope 0 at src/main.rs:3:13: 3:14
        _3 = (_1.1: i32);                // scope 0 at src/main.rs:3:13: 3:14
        _0 = const ();                   // scope 1 at src/main.rs:3:19: 3:21
        StorageDead(_3);                 // scope 0 at src/main.rs:3:20: 3:21
        StorageDead(_2);                 // scope 0 at src/main.rs:3:20: 3:21
        goto -> bb1;                     // scope 0 at src/main.rs:3:20: 3:21
    }

    bb1: {
        StorageDead(_1);                 // scope 0 at src/main.rs:5:1: 5:2
        return;                          // scope 0 at src/main.rs:5:2: 5:2
    }
}
