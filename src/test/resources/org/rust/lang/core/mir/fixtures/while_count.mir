fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at src/main.rs:1:11: 1:11
    let mut _1: i32;                     // in scope 0 at src/main.rs:2:9: 2:14
    let _2: ();                          // in scope 0 at src/main.rs:3:5: 5:6
    let mut _3: ();                      // in scope 0 at src/main.rs:1:1: 6:2
    let mut _4: bool;                    // in scope 0 at src/main.rs:3:11: 3:16
    let mut _5: i32;                     // in scope 0 at src/main.rs:3:11: 3:12
    let mut _6: (i32, bool);             // in scope 0 at src/main.rs:4:9: 4:15
    let mut _7: !;                       // in scope 0 at src/main.rs:3:5: 5:6
    let _8: ();                          // in scope 0 at src/main.rs:3:5: 5:6
    let mut _9: !;                       // in scope 0 at src/main.rs:3:5: 5:6
    scope 1 {
        debug i => _1;                   // in scope 1 at src/main.rs:2:9: 2:14
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at src/main.rs:2:9: 2:14
        _1 = const 0_i32;                // scope 0 at src/main.rs:2:17: 2:18
        FakeRead(ForLet(None), _1);      // scope 0 at src/main.rs:2:9: 2:14
        StorageLive(_2);                 // scope 1 at src/main.rs:3:5: 5:6
        goto -> bb1;                     // scope 1 at src/main.rs:3:5: 5:6
    }

    bb1: {
        falseUnwind -> [real: bb2, unwind: bb12]; // scope 1 at src/main.rs:3:5: 5:6
    }

    bb2: {
        StorageLive(_4);                 // scope 1 at src/main.rs:3:11: 3:16
        StorageLive(_5);                 // scope 1 at src/main.rs:3:11: 3:12
        _5 = _1;                         // scope 1 at src/main.rs:3:11: 3:12
        _4 = Lt(move _5, const 3_i32);   // scope 1 at src/main.rs:3:11: 3:16
        StorageDead(_5);                 // scope 1 at src/main.rs:3:15: 3:16
        switchInt(move _4) -> [0: bb4, otherwise: bb3]; // scope 1 at src/main.rs:3:11: 3:16
    }

    bb3: {
        _6 = CheckedAdd(_1, const 1_i32); // scope 1 at src/main.rs:4:9: 4:15
        assert(!move (_6.1: bool), "attempt to compute `{} + {}`, which would overflow", _1, const 1_i32) -> [success: bb5, unwind: bb12]; // scope 1 at src/main.rs:4:9: 4:15
    }

    bb4: {
        goto -> bb6;                     // scope 1 at src/main.rs:3:11: 3:16
    }

    bb5: {
        _1 = move (_6.0: i32);           // scope 1 at src/main.rs:4:9: 4:15
        _3 = const ();                   // scope 1 at src/main.rs:3:17: 5:6
        goto -> bb10;                    // scope 1 at src/main.rs:3:5: 5:6
    }

    bb6: {
        StorageLive(_8);                 // scope 1 at src/main.rs:3:5: 5:6
        _2 = const ();                   // scope 1 at src/main.rs:3:5: 5:6
        goto -> bb11;                    // scope 1 at src/main.rs:3:5: 5:6
    }

    bb7: {
        unreachable;                     // scope 1 at src/main.rs:3:5: 5:6
    }

    bb8: {
        StorageDead(_8);                 // scope 1 at src/main.rs:5:5: 5:6
        unreachable;                     // scope 1 at src/main.rs:3:5: 5:6
    }

    bb9: {
        goto -> bb10;                    // scope 1 at src/main.rs:3:5: 5:6
    }

    bb10: {
        StorageDead(_4);                 // scope 1 at src/main.rs:5:5: 5:6
        goto -> bb1;                     // scope 1 at src/main.rs:3:5: 5:6
    }

    bb11: {
        StorageDead(_8);                 // scope 1 at src/main.rs:5:5: 5:6
        StorageDead(_4);                 // scope 1 at src/main.rs:5:5: 5:6
        StorageDead(_2);                 // scope 1 at src/main.rs:5:6: 5:7
        _0 = const ();                   // scope 0 at src/main.rs:1:11: 6:2
        StorageDead(_1);                 // scope 0 at src/main.rs:6:1: 6:2
        return;                          // scope 0 at src/main.rs:6:2: 6:2
    }

    bb12 (cleanup): {
        resume;                          // scope 0 at src/main.rs:1:1: 6:2
    }
}
