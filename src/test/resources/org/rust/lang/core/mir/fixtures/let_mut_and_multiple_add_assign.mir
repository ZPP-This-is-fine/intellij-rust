fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at src/main.rs:1:11: 1:11
    let mut _1: i32;                     // in scope 0 at src/main.rs:2:9: 2:14
    let mut _2: (i32, bool);             // in scope 0 at src/main.rs:3:5: 3:11
    let mut _3: (i32, bool);             // in scope 0 at src/main.rs:4:5: 4:11
    scope 1 {
        debug x => _1;                   // in scope 1 at src/main.rs:2:9: 2:14
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at src/main.rs:2:9: 2:14
        _1 = const 1_i32;                // scope 0 at src/main.rs:2:17: 2:18
        FakeRead(ForLet(None), _1);      // scope 0 at src/main.rs:2:9: 2:14
        _2 = CheckedAdd(_1, const 2_i32); // scope 1 at src/main.rs:3:5: 3:11
        assert(!move (_2.1: bool), "attempt to compute `{} + {}`, which would overflow", _1, const 2_i32) -> [success: bb1, unwind: bb3]; // scope 1 at src/main.rs:3:5: 3:11
    }

    bb1: {
        _1 = move (_2.0: i32);           // scope 1 at src/main.rs:3:5: 3:11
        _3 = CheckedAdd(_1, const 3_i32); // scope 1 at src/main.rs:4:5: 4:11
        assert(!move (_3.1: bool), "attempt to compute `{} + {}`, which would overflow", _1, const 3_i32) -> [success: bb2, unwind: bb3]; // scope 1 at src/main.rs:4:5: 4:11
    }

    bb2: {
        _1 = move (_3.0: i32);           // scope 1 at src/main.rs:4:5: 4:11
        _0 = const ();                   // scope 0 at src/main.rs:1:11: 5:2
        StorageDead(_1);                 // scope 0 at src/main.rs:5:1: 5:2
        return;                          // scope 0 at src/main.rs:5:2: 5:2
    }

    bb3 (cleanup): {
        resume;                          // scope 0 at src/main.rs:1:1: 5:2
    }
}
