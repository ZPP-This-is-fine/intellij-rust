fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at src/main.rs:1:11: 1:11
    let _1: usize;                       // in scope 0 at src/main.rs:2:9: 2:10
    let _4: usize;                       // in scope 0 at src/main.rs:4:15: 4:16
    let mut _5: usize;                   // in scope 0 at src/main.rs:4:13: 4:17
    let mut _6: bool;                    // in scope 0 at src/main.rs:4:13: 4:17
    scope 1 {
        debug i => _1;                   // in scope 1 at src/main.rs:2:9: 2:10
        let _2: [i32; 3];                // in scope 1 at src/main.rs:3:9: 3:10
        scope 2 {
            debug x => _2;               // in scope 2 at src/main.rs:3:9: 3:10
            let _3: i32;                 // in scope 2 at src/main.rs:4:9: 4:10
            scope 3 {
                debug y => _3;           // in scope 3 at src/main.rs:4:9: 4:10
            }
        }
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at src/main.rs:2:9: 2:10
        _1 = const 0_usize;              // scope 0 at src/main.rs:2:13: 2:14
        FakeRead(ForLet(None), _1);      // scope 0 at src/main.rs:2:9: 2:10
        StorageLive(_2);                 // scope 1 at src/main.rs:3:9: 3:10
        _2 = [const 1_i32, const 2_i32, const 3_i32]; // scope 1 at src/main.rs:3:13: 3:22
        FakeRead(ForLet(None), _2);      // scope 1 at src/main.rs:3:9: 3:10
        StorageLive(_3);                 // scope 2 at src/main.rs:4:9: 4:10
        StorageLive(_4);                 // scope 2 at src/main.rs:4:15: 4:16
        _4 = _1;                         // scope 2 at src/main.rs:4:15: 4:16
        _5 = Len(_2);                    // scope 2 at src/main.rs:4:13: 4:17
        _6 = Lt(_4, _5);                 // scope 2 at src/main.rs:4:13: 4:17
        assert(move _6, "index out of bounds: the length is {} but the index is {}", move _5, _4) -> [success: bb1, unwind: bb2]; // scope 2 at src/main.rs:4:13: 4:17
    }

    bb1: {
        _3 = _2[_4];                     // scope 2 at src/main.rs:4:13: 4:17
        FakeRead(ForLet(None), _3);      // scope 2 at src/main.rs:4:9: 4:10
        StorageDead(_4);                 // scope 2 at src/main.rs:4:17: 4:18
        _0 = const ();                   // scope 0 at src/main.rs:1:11: 5:2
        StorageDead(_3);                 // scope 2 at src/main.rs:5:1: 5:2
        StorageDead(_2);                 // scope 1 at src/main.rs:5:1: 5:2
        StorageDead(_1);                 // scope 0 at src/main.rs:5:1: 5:2
        return;                          // scope 0 at src/main.rs:5:2: 5:2
    }

    bb2 (cleanup): {
        resume;                          // scope 0 at src/main.rs:1:1: 5:2
    }
}
