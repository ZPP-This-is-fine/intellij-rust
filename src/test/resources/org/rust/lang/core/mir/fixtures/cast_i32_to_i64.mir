fn foo() -> () {
    let mut _0: ();                      // return place in scope 0 at src/main.rs:1:10: 1:10
    let _1: i32;                         // in scope 0 at src/main.rs:2:9: 2:12
    let mut _3: i32;                     // in scope 0 at src/main.rs:3:15: 3:18
    scope 1 {
        debug i32 => _1;                 // in scope 1 at src/main.rs:2:9: 2:12
        let _2: i64;                     // in scope 1 at src/main.rs:3:9: 3:12
        scope 2 {
            debug i64 => _2;             // in scope 2 at src/main.rs:3:9: 3:12
        }
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at src/main.rs:2:9: 2:12
        _1 = const 43_i32;               // scope 0 at src/main.rs:2:15: 2:17
        FakeRead(ForLet(None), _1);      // scope 0 at src/main.rs:2:9: 2:12
        StorageLive(_2);                 // scope 1 at src/main.rs:3:9: 3:12
        StorageLive(_3);                 // scope 1 at src/main.rs:3:15: 3:18
        _3 = _1;                         // scope 1 at src/main.rs:3:15: 3:18
        _2 = move _3 as i64 (IntToInt);  // scope 1 at src/main.rs:3:15: 3:25
        StorageDead(_3);                 // scope 1 at src/main.rs:3:24: 3:25
        FakeRead(ForLet(None), _2);      // scope 1 at src/main.rs:3:9: 3:12
        _0 = const ();                   // scope 0 at src/main.rs:1:10: 4:2
        StorageDead(_2);                 // scope 1 at src/main.rs:4:1: 4:2
        StorageDead(_1);                 // scope 0 at src/main.rs:4:1: 4:2
        return;                          // scope 0 at src/main.rs:4:2: 4:2
    }
}
