const FOO: i32 = {
    let mut _0: i32;                     // return place in scope 0 at src/main.rs:1:12: 1:15
    let _1: i32;                         // in scope 0 at src/main.rs:2:9: 2:10
    let mut _4: i32;                     // in scope 0 at src/main.rs:5:5: 5:10
    let mut _5: i32;                     // in scope 0 at src/main.rs:5:5: 5:6
    let mut _6: i32;                     // in scope 0 at src/main.rs:5:9: 5:10
    let mut _7: (i32, bool);             // in scope 0 at src/main.rs:5:5: 5:10
    let mut _8: i32;                     // in scope 0 at src/main.rs:5:13: 5:14
    let mut _9: (i32, bool);             // in scope 0 at src/main.rs:5:5: 5:14
    scope 1 {
        debug a => _1;                   // in scope 1 at src/main.rs:2:9: 2:10
        let _2: i32;                     // in scope 1 at src/main.rs:3:9: 3:10
        scope 2 {
            debug b => _2;               // in scope 2 at src/main.rs:3:9: 3:10
            let _3: i32;                 // in scope 2 at src/main.rs:4:9: 4:10
            scope 3 {
                debug c => _3;           // in scope 3 at src/main.rs:4:9: 4:10
            }
        }
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at src/main.rs:2:9: 2:10
        _1 = const 40_i32;               // scope 0 at src/main.rs:2:13: 2:15
        FakeRead(ForLet(None), _1);      // scope 0 at src/main.rs:2:9: 2:10
        StorageLive(_2);                 // scope 1 at src/main.rs:3:9: 3:10
        _2 = const 3_i32;                // scope 1 at src/main.rs:3:13: 3:14
        FakeRead(ForLet(None), _2);      // scope 1 at src/main.rs:3:9: 3:10
        StorageLive(_3);                 // scope 2 at src/main.rs:4:9: 4:10
        _3 = const 0_i32;                // scope 2 at src/main.rs:4:13: 4:14
        FakeRead(ForLet(None), _3);      // scope 2 at src/main.rs:4:9: 4:10
        StorageLive(_4);                 // scope 3 at src/main.rs:5:5: 5:10
        StorageLive(_5);                 // scope 3 at src/main.rs:5:5: 5:6
        _5 = _1;                         // scope 3 at src/main.rs:5:5: 5:6
        StorageLive(_6);                 // scope 3 at src/main.rs:5:9: 5:10
        _6 = _2;                         // scope 3 at src/main.rs:5:9: 5:10
        _7 = CheckedAdd(_5, _6);         // scope 3 at src/main.rs:5:5: 5:10
        assert(!move (_7.1: bool), "attempt to compute `{} + {}`, which would overflow", move _5, move _6) -> [success: bb1, unwind: bb3]; // scope 3 at src/main.rs:5:5: 5:10
    }

    bb1: {
        _4 = move (_7.0: i32);           // scope 3 at src/main.rs:5:5: 5:10
        StorageDead(_6);                 // scope 3 at src/main.rs:5:9: 5:10
        StorageDead(_5);                 // scope 3 at src/main.rs:5:9: 5:10
        StorageLive(_8);                 // scope 3 at src/main.rs:5:13: 5:14
        _8 = _3;                         // scope 3 at src/main.rs:5:13: 5:14
        _9 = CheckedAdd(_4, _8);         // scope 3 at src/main.rs:5:5: 5:14
        assert(!move (_9.1: bool), "attempt to compute `{} + {}`, which would overflow", move _4, move _8) -> [success: bb2, unwind: bb3]; // scope 3 at src/main.rs:5:5: 5:14
    }

    bb2: {
        _0 = move (_9.0: i32);           // scope 3 at src/main.rs:5:5: 5:14
        StorageDead(_8);                 // scope 3 at src/main.rs:5:13: 5:14
        StorageDead(_4);                 // scope 3 at src/main.rs:5:13: 5:14
        StorageDead(_3);                 // scope 2 at src/main.rs:6:1: 6:2
        StorageDead(_2);                 // scope 1 at src/main.rs:6:1: 6:2
        StorageDead(_1);                 // scope 0 at src/main.rs:6:1: 6:2
        return;                          // scope 0 at src/main.rs:1:1: 6:3
    }

    bb3 (cleanup): {
        resume;                          // scope 0 at src/main.rs:1:1: 6:3
    }
}
