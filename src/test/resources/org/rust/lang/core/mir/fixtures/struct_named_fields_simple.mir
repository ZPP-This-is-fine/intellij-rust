fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at src/main.rs:2:11: 2:11
    let _1: Foo;                         // in scope 0 at src/main.rs:3:9: 3:12
    scope 1 {
        debug foo => _1;                 // in scope 1 at src/main.rs:3:9: 3:12
        let _2: i32;                     // in scope 1 at src/main.rs:4:9: 4:10
        scope 2 {
            debug x => _2;               // in scope 2 at src/main.rs:4:9: 4:10
            let _3: i32;                 // in scope 2 at src/main.rs:5:9: 5:10
            scope 3 {
                debug y => _3;           // in scope 3 at src/main.rs:5:9: 5:10
            }
        }
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at src/main.rs:3:9: 3:12
        _1 = Foo { a: const 1_i32, b: const 2_i32 }; // scope 0 at src/main.rs:3:15: 3:33
        FakeRead(ForLet(None), _1);      // scope 0 at src/main.rs:3:9: 3:12
        StorageLive(_2);                 // scope 1 at src/main.rs:4:9: 4:10
        _2 = (_1.0: i32);                // scope 1 at src/main.rs:4:13: 4:18
        FakeRead(ForLet(None), _2);      // scope 1 at src/main.rs:4:9: 4:10
        StorageLive(_3);                 // scope 2 at src/main.rs:5:9: 5:10
        _3 = (_1.1: i32);                // scope 2 at src/main.rs:5:13: 5:18
        FakeRead(ForLet(None), _3);      // scope 2 at src/main.rs:5:9: 5:10
        _0 = const ();                   // scope 0 at src/main.rs:2:11: 6:2
        StorageDead(_3);                 // scope 2 at src/main.rs:6:1: 6:2
        StorageDead(_2);                 // scope 1 at src/main.rs:6:1: 6:2
        StorageDead(_1);                 // scope 0 at src/main.rs:6:1: 6:2
        return;                          // scope 0 at src/main.rs:6:2: 6:2
    }
}
