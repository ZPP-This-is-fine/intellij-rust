fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at src/main.rs:1:11: 1:11
    let _1: i32;                         // in scope 0 at src/main.rs:2:9: 2:10
    let mut _3: i32;                     // in scope 0 at src/main.rs:3:14: 3:15
    scope 1 {
        debug y => _1;                   // in scope 1 at src/main.rs:2:9: 2:10
        let _2: [i32; 0];                // in scope 1 at src/main.rs:3:9: 3:10
        scope 2 {
            debug x => _2;               // in scope 2 at src/main.rs:3:9: 3:10
        }
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at src/main.rs:2:9: 2:10
        _1 = const 1_i32;                // scope 0 at src/main.rs:2:13: 2:14
        FakeRead(ForLet(None), _1);      // scope 0 at src/main.rs:2:9: 2:10
        StorageLive(_2);                 // scope 1 at src/main.rs:3:9: 3:10
        StorageLive(_3);                 // scope 1 at src/main.rs:3:14: 3:15
        _3 = _1;                         // scope 1 at src/main.rs:3:14: 3:15
        drop(_3) -> [return: bb1, unwind: bb2]; // scope 1 at src/main.rs:3:13: 3:19
    }

    bb1: {
        _2 = [];                         // scope 1 at src/main.rs:3:13: 3:19
        StorageDead(_3);                 // scope 1 at src/main.rs:3:18: 3:19
        FakeRead(ForLet(None), _2);      // scope 1 at src/main.rs:3:9: 3:10
        _0 = const ();                   // scope 0 at src/main.rs:1:11: 4:2
        StorageDead(_2);                 // scope 1 at src/main.rs:4:1: 4:2
        StorageDead(_1);                 // scope 0 at src/main.rs:4:1: 4:2
        return;                          // scope 0 at src/main.rs:4:2: 4:2
    }

    bb2 (cleanup): {
        resume;                          // scope 0 at src/main.rs:1:1: 4:2
    }
}
