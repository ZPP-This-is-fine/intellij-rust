fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at src/main.rs:3:11: 3:11
    let _1: B;                           // in scope 0 at src/main.rs:4:9: 4:10
    let mut _2: A;                       // in scope 0 at src/main.rs:4:19: 4:24
    let _3: i32;                         // in scope 0 at src/main.rs:5:5: 9:6
    let mut _4: isize;                   // in scope 0 at src/main.rs:6:15: 6:20
    let mut _5: isize;                   // in scope 0 at src/main.rs:6:9: 6:21
    scope 1 {
        debug e => _1;                   // in scope 1 at src/main.rs:4:9: 4:10
        let _6: A;                       // in scope 1 at src/main.rs:8:15: 8:16
        scope 2 {
            debug a => _6;               // in scope 2 at src/main.rs:8:15: 8:16
        }
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at src/main.rs:4:9: 4:10
        StorageLive(_2);                 // scope 0 at src/main.rs:4:19: 4:24
        _2 = A::A1;                      // scope 0 at src/main.rs:4:19: 4:24
        _1 = B::B1(move _2);             // scope 0 at src/main.rs:4:13: 4:25
        StorageDead(_2);                 // scope 0 at src/main.rs:4:24: 4:25
        FakeRead(ForLet(None), _1);      // scope 0 at src/main.rs:4:9: 4:10
        StorageLive(_3);                 // scope 1 at src/main.rs:5:5: 9:6
        FakeRead(ForMatchedPlace(None), _1); // scope 1 at src/main.rs:5:11: 5:12
        _5 = discriminant(_1);           // scope 1 at src/main.rs:5:11: 5:12
        switchInt(move _5) -> [0: bb1, 1: bb5, otherwise: bb4]; // scope 1 at src/main.rs:5:5: 5:10
    }

    bb1: {
        _4 = discriminant(((_1 as B1).0: A)); // scope 1 at src/main.rs:5:11: 5:12
        switchInt(move _4) -> [0: bb2, 1: bb3, otherwise: bb4]; // scope 1 at src/main.rs:5:5: 5:10
    }

    bb2: {
        falseEdge -> [real: bb6, imaginary: bb3]; // scope 1 at src/main.rs:6:9: 6:21
    }

    bb3: {
        falseEdge -> [real: bb7, imaginary: bb5]; // scope 1 at src/main.rs:7:9: 7:21
    }

    bb4: {
        unreachable;                     // scope 1 at src/main.rs:5:11: 5:12
    }

    bb5: {
        StorageLive(_6);                 // scope 1 at src/main.rs:8:15: 8:16
        _6 = move ((_1 as B2).0: A);     // scope 1 at src/main.rs:8:15: 8:16
        _3 = const 3_i32;                // scope 2 at src/main.rs:8:23: 8:24
        StorageDead(_6);                 // scope 1 at src/main.rs:8:25: 8:26
        goto -> bb8;                     // scope 1 at src/main.rs:8:25: 8:26
    }

    bb6: {
        _3 = const 1_i32;                // scope 1 at src/main.rs:6:27: 6:28
        goto -> bb8;                     // scope 1 at src/main.rs:6:27: 6:28
    }

    bb7: {
        _3 = const 2_i32;                // scope 1 at src/main.rs:7:27: 7:28
        goto -> bb8;                     // scope 1 at src/main.rs:7:27: 7:28
    }

    bb8: {
        StorageDead(_3);                 // scope 1 at src/main.rs:9:6: 9:7
        _0 = const ();                   // scope 0 at src/main.rs:3:11: 10:2
        StorageDead(_1);                 // scope 0 at src/main.rs:10:1: 10:2
        return;                          // scope 0 at src/main.rs:10:2: 10:2
    }
}
